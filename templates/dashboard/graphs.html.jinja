{% extends 'dashboard/common.html.jinja' %}
{% set active_page = 'graphs' %}


{% block title %}نمودار های برنامه ریزی{% endblock %}
{% block header %}نمودار های برنامه ریزی{% endblock %}

{% block toolbar %}
<!--<div class="input-group mb-3">
  <label for="week" class="input-group-text col-form-label">هفته مورد نظر</label>
  <input type="text" class="form-control" id="week" data-jdp required>
</div>-->
{% endblock %}

{% block content %}

<div class="container">
  <div class="row">
    <div class="col"><canvas id="myBarChart"></canvas></div>
    <div class="col"><canvas id="myLineChart"></canvas></div>
  </div>
</div>

{% endblock %}

{% block code %}

<!--<style>
.jdp-day:nth-child(7n+1), .jdp-day:nth-child(7n+8) {
  background-color: gray !important;
}

.highlightedWeek { 
  background: rgba(0, 0, 0, .1) !important;
  z-index: 1;
}
</style>-->

<link rel="stylesheet" href="https://unpkg.com/@majidh1/jalalidatepicker/dist/jalalidatepicker.min.css">
<script type="text/javascript" src="https://unpkg.com/@majidh1/jalalidatepicker/dist/jalalidatepicker.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!--
<script>
jalaliDatepicker.startWatch();
jalaliDatepicker.updateOptions({
  date: true,
  zIndex: 10000,
});

const addDaysListener = () => {
  const days = document.querySelectorAll('.jdp-day');
  const weeks = document.querySelectorAll('.last-week');

  const handleMouseEvent = (day, action) => {
    for (let i = 0; i < weeks.length - 1; i++) {
      const first = Array.from(weeks[i].parentElement.children).indexOf(weeks[i]);
      const second = Array.from(weeks[i + 1].parentElement.children).indexOf(weeks[i + 1]);
      const between = Array.from(weeks[i].parentElement.children).slice(first + 1, second + 1);

      if (between.includes(day)) {
        between.forEach(el => { el.classList[action]('highlightedWeek'); });
        break;
      }
    }
  };

  for (let i = 0; i < weeks.length - 1; i++) {
    const first = Array.from(weeks[i].parentElement.children).indexOf(weeks[i]);
    const second = Array.from(weeks[i + 1].parentElement.children).indexOf(weeks[i + 1]);
    const between = Array.from(weeks[i].parentElement.children).slice(first + 1, second + 1);
    
    if(Array.from(between).some(el => el.classList.contains('selected'))) {
      between.forEach(el => { el.classList.add('selected'); });
    } else {
      between.forEach(el => { el.classList.remove('selected'); });
    }
  }

  days.forEach(day => {
    day.addEventListener('mouseover', () => handleMouseEvent(day, 'add'));
    day.addEventListener('mouseout', () => handleMouseEvent(day, 'remove'));
  });
};

const interval = setInterval(() => {
  const element = document.querySelector('jdp-container');
  if (element) {
      clearInterval(interval);
      addDaysListener();
      const config = { childList: true };
      const observer = new MutationObserver(addDaysListener);
      observer.observe(element, config);
  }
}, 100);

</script>
-->

<script>
  Chart.defaults.font.family = "Vazirmatn"

  let server_data = {{ data| safe }}

  const ctxBar = document.getElementById('myBarChart').getContext('2d');
  const ctxLine = document.getElementById('myLineChart').getContext('2d');

  const datasets = [];
  const labels = new Set();

  for (const [key, value] of Object.entries(server_data)) {
    const type = value[0].type;
    const data = {};
    for (const [date, total] of Object.entries(value[0].per_day_total)) {
      const formattedDate = moment(date, 'YYYY/MM/DD').locale('fa').format('YYYY/MM/DD');
      data[formattedDate] = total;
      labels.add(formattedDate);
    }
    datasets.push({
      label: type.description,
      data: data,
      backgroundColor: type.background_color_hex + '40',
      borderColor: type.background_color_hex,
      borderWidth: 1
    });
  }

  const sortedLabels = Array.from(labels).sort();

  // Bar Chart
  const barChart = new Chart(ctxBar, {
    type: 'bar',
    data: {
      labels: sortedLabels,
      datasets: datasets
    },
    options: {
      responsive: true,
      scales: {
        x: {
          stacked: true,
        },
        y: {
          stacked: true,
          beginAtZero: true
        }
      },
      plugins: {
        title: {
          display: true,
          text: 'خلاصه برنامه ریزی'
        },
        tooltip: {
          mode: 'index',
          intersect: false
        }
      }
    }
  });

  // Line Chart
  const lineDatasets = datasets.map(dataset => ({
    ...dataset,
    fill: false,
    tension: 0.1,
    backgroundColor: dataset.backgroundColor
  }));

  const lineChart = new Chart(ctxLine, {
    type: 'line',
    data: {
      labels: sortedLabels,
      datasets: lineDatasets
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          title: {
            display: true,
            text: 'Hours'
          }
        }
      },
      plugins: {
        title: {
          display: true,
          text: 'روند برنامه ریزی'
        },
        tooltip: {
          mode: 'index',
          intersect: false
        }
      }
    }
  });
</script>
{% endblock %}